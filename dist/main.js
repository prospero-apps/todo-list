(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>C});var a=t(537),o=t.n(a),r=t(645),i=t.n(r),d=t(667),s=t.n(d),l=new URL(t(40),t.b),c=new URL(t(39),t.b),u=new URL(t(335),t.b),A=new URL(t(820),t.b),m=i()(o()),h=s()(l),f=s()(c),p=s()(u),g=s()(A);m.push([e.id,":root {\n    --semitransparent: rgba(255, 255, 255, .75);\n    --border-color: rgba(200, 200, 200);\n    --bg-color: rgba(165, 153, 115, .3);\n    --button-color: rgb(206, 37, 37);\n    --button-clicked-color: rgb(172, 112, 112);\n    --high-priority-color: rgb(231, 51, 6);\n    --check-mark: url("+h+");\n}\n\n@font-face {\n    font-family: 'Indie Flower';\n    src: url("+f+") format('truetype');    \n}\n\n@font-face {\n    font-family: 'Roboto';\n    src: url("+p+") format('truetype');\n}\n\nbody {\n    background: url("+g+");\n    font-size: 2em;\n    font-family: 'Roboto';\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    width: 100%;\n    height: 100vh;\n    position: relative;\n}\n\n/* MAIN CONTAINER */\n#container {\n    background-color: var(--semitransparent);\n    width: 80%;\n    min-width: 600px;\n    height: 80vh;\n    min-height: 600px;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 100px 3fr 1fr;\n    box-shadow: 0 0 50px black;\n}\n\n#header {\n    grid-column: 1 / 3;\n    background-color: var(--bg-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n    text-shadow: 0 0 5px black;    \n}\n\n#sidebar {\n    border-bottom: 1px solid var(--border-color);\n}\n\n#main-panel {\n    border-left: 1px solid var(--border-color);\n    grid-row: 2 / 4;\n    grid-column: 2 / 3;\n}\n\n/* TODO ITEM */\n.todo-item {\n    font-size: .6em;\n    font-family: \"Indie Flower\", sans-serif;\n    font-weight:bold;\n    display: grid;\n    grid-template-columns: 2fr 1.2fr;\n    grid-template-rows: 2em 1fr;\n}\n\n.high-priority {\n    color: var(--high-priority-color);\n}\n\n.todo-title-panel {\n    font-family: \"Indie Flower\", sans-serif;\n    display: flex;\n    align-items: center;\n    gap: 1em;\n}\n\n.todo-title-panel:hover,\n.nav-item:hover {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox {\n    appearance: none;\n    background-color: white;\n    border: 3px solid black;\n    border-radius: 5px;\n    width: 2.2em;\n    height: 2.2em;\n    min-width: 2.2em;\n    min-height: 2.2em;\n}\n\n.todo-checkbox:checked {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox:checked::after {\n    content: '';\n    background-image: var(--check-mark);\n    width: 1.6em;\n    height: 1.6em;\n    background-size: 1.7em;\n    display: inline-block;\n}\n\n.todo-title {\n    width:100%;\n}\n\n.done {\n    opacity: .5;\n}\n\n.done .todo-title {\n    text-decoration: line-through;\n}\n\n.todo-date-edit-trash {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.todo-description {\n    grid-row: 2;\n    grid-column: 1 / 3;\n    padding-left: 2.6em;\n    display: none;\n}\n\n/* todo list */\n.list-panel {\n    display: flex;\n    flex-direction: column;\n    gap: .5em;\n}\n\n.todo-edit:hover,\n.todo-trash:hover {\n    opacity: .5;\n}\n\n/* SIDEBAR */\n.nav-panel {\n    padding: 1em;\n    font-size: .7em;\n    display: flex;\n    flex-direction: column;\n    gap: .2em; \n\n}\n\n.nav-item {\n    display: flex;\n    gap: 1em;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-item.selected {\n    font-weight: bold;\n}\n\n.nav-item:hover {\n    cursor: pointer;    \n}\n\n.nav-item:active {\n    border: 2px solid black;\n}\n\n.nav-icon-name {\n    display: flex;\n    align-items:flex-start;\n    gap: .5em;\n}\n\n.my-lists {\n    display: flex;\n    gap: .6em;\n    justify-content: flex-start;\n    align-items: center;    \n}\n\n.my-lists-panel {\n    height: 15vh;\n    overflow-y: auto;\n}\n\n.list-name {\n    font-size: smaller;\n    padding-left: 1em;\n    box-sizing: content-box;\n}\n\n.nav-counter {\n    color: white;\n    border: 2px solid black;\n    background-color: black;\n    min-width: 1em;\n    height: 1em;\n    font-size: .6em;\n    font-weight: bold;\n    padding: 2px;\n    text-align: center;\n    border-radius: 50%;\n}\n\n.list-name .nav-counter {\n    background-color: rgb(58, 55, 55);\n    border-color: rgb(58, 55, 55);\n}\n\n.add-button {\n    font-size: 1em;\n    font-weight: bold;\n    padding: .2em;;\n    margin-top: .1em;\n    border: 4px solid black;\n    background-color: var(--button-color);\n    color: white;\n    border-radius: 20px;\n}\n\n.add-button:hover,\n.add-button:active {\n    background-color: var(--button-clicked-color);\n}\n\n/* SCREEN AND DIALOGS */\n#screen {\n    width: 100%;\n    height: 100vh;\n    background-color: black;\n    opacity: .4;\n    position: absolute;\n    left: 0;\n    top: 0;\n    display: none;\n}\n\n.add-list-dialog,\n.add-todo-dialog {\n    width: 400px;\n    height: 200px;\n    background-color: white;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    box-shadow: 0 0 50px black;\n    opacity: 1;    \n    display: flex;\n    flex-direction: column;\n}\n\n.add-todo-dialog {\n    width: 400px;\n    height: 500px;\n}\n\n.bar {\n    display: flex;\n    background-color: black;\n    height: 100px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.close {\n    border: 2px solid white;\n    width: 30px;\n    height: 30px;\n    color: white;\n    border-radius: 10px;\n    background-color: red;\n    margin-right: 5px;\n    font-size: .7em;\n    font-weight: bold;\n    padding: 0;\n}\n\n.close:hover,\n.close:active {\n    background-color: rgb(238, 143, 143);\n    cursor: pointer;\n}\n\n.add-form {\n    height: 100%;\n    padding: 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n.form-panel {\n    display: flex;\n    font-size: .75em;\n    gap: 10px;\n}\n\n.description-panel,\n.date-panel {\n    font-size: .75em;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.form-input,\n.form-textarea,\n.date-input,\n.priority-input,\n.list-input {\n    font-size: 1rem;\n    width: 100%;\n    border: 2px solid black;\n    border-radius: 10px;\n}\n\n.form-textarea {\n    height: 5em;\n    resize: none;\n}\n\n.form-button {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: white;\n    border: 2px solid black;\n    border-radius: 10px;\n    background-color: var(--button-color);    \n}\n\n.form-button:hover,\n.form-button:active {\n    background-color: var(--button-clicked-color);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n    --semitransparent: rgba(255, 255, 255, .75);\n    --border-color: rgba(200, 200, 200);\n    --bg-color: rgba(165, 153, 115, .3);\n    --button-color: rgb(206, 37, 37);\n    --button-clicked-color: rgb(172, 112, 112);\n    --high-priority-color: rgb(231, 51, 6);\n    --check-mark: url('./icons/check.png');\n}\n\n@font-face {\n    font-family: 'Indie Flower';\n    src: url('./fonts/IndieFlower.ttf') format('truetype');    \n}\n\n@font-face {\n    font-family: 'Roboto';\n    src: url('./fonts/Roboto.ttf') format('truetype');\n}\n\nbody {\n    background: url('./images/bg.jpg');\n    font-size: 2em;\n    font-family: 'Roboto';\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    width: 100%;\n    height: 100vh;\n    position: relative;\n}\n\n/* MAIN CONTAINER */\n#container {\n    background-color: var(--semitransparent);\n    width: 80%;\n    min-width: 600px;\n    height: 80vh;\n    min-height: 600px;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 100px 3fr 1fr;\n    box-shadow: 0 0 50px black;\n}\n\n#header {\n    grid-column: 1 / 3;\n    background-color: var(--bg-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n    text-shadow: 0 0 5px black;    \n}\n\n#sidebar {\n    border-bottom: 1px solid var(--border-color);\n}\n\n#main-panel {\n    border-left: 1px solid var(--border-color);\n    grid-row: 2 / 4;\n    grid-column: 2 / 3;\n}\n\n/* TODO ITEM */\n.todo-item {\n    font-size: .6em;\n    font-family: \"Indie Flower\", sans-serif;\n    font-weight:bold;\n    display: grid;\n    grid-template-columns: 2fr 1.2fr;\n    grid-template-rows: 2em 1fr;\n}\n\n.high-priority {\n    color: var(--high-priority-color);\n}\n\n.todo-title-panel {\n    font-family: \"Indie Flower\", sans-serif;\n    display: flex;\n    align-items: center;\n    gap: 1em;\n}\n\n.todo-title-panel:hover,\n.nav-item:hover {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox {\n    appearance: none;\n    background-color: white;\n    border: 3px solid black;\n    border-radius: 5px;\n    width: 2.2em;\n    height: 2.2em;\n    min-width: 2.2em;\n    min-height: 2.2em;\n}\n\n.todo-checkbox:checked {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox:checked::after {\n    content: '';\n    background-image: var(--check-mark);\n    width: 1.6em;\n    height: 1.6em;\n    background-size: 1.7em;\n    display: inline-block;\n}\n\n.todo-title {\n    width:100%;\n}\n\n.done {\n    opacity: .5;\n}\n\n.done .todo-title {\n    text-decoration: line-through;\n}\n\n.todo-date-edit-trash {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.todo-description {\n    grid-row: 2;\n    grid-column: 1 / 3;\n    padding-left: 2.6em;\n    display: none;\n}\n\n/* todo list */\n.list-panel {\n    display: flex;\n    flex-direction: column;\n    gap: .5em;\n}\n\n.todo-edit:hover,\n.todo-trash:hover {\n    opacity: .5;\n}\n\n/* SIDEBAR */\n.nav-panel {\n    padding: 1em;\n    font-size: .7em;\n    display: flex;\n    flex-direction: column;\n    gap: .2em; \n\n}\n\n.nav-item {\n    display: flex;\n    gap: 1em;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-item.selected {\n    font-weight: bold;\n}\n\n.nav-item:hover {\n    cursor: pointer;    \n}\n\n.nav-item:active {\n    border: 2px solid black;\n}\n\n.nav-icon-name {\n    display: flex;\n    align-items:flex-start;\n    gap: .5em;\n}\n\n.my-lists {\n    display: flex;\n    gap: .6em;\n    justify-content: flex-start;\n    align-items: center;    \n}\n\n.my-lists-panel {\n    height: 15vh;\n    overflow-y: auto;\n}\n\n.list-name {\n    font-size: smaller;\n    padding-left: 1em;\n    box-sizing: content-box;\n}\n\n.nav-counter {\n    color: white;\n    border: 2px solid black;\n    background-color: black;\n    min-width: 1em;\n    height: 1em;\n    font-size: .6em;\n    font-weight: bold;\n    padding: 2px;\n    text-align: center;\n    border-radius: 50%;\n}\n\n.list-name .nav-counter {\n    background-color: rgb(58, 55, 55);\n    border-color: rgb(58, 55, 55);\n}\n\n.add-button {\n    font-size: 1em;\n    font-weight: bold;\n    padding: .2em;;\n    margin-top: .1em;\n    border: 4px solid black;\n    background-color: var(--button-color);\n    color: white;\n    border-radius: 20px;\n}\n\n.add-button:hover,\n.add-button:active {\n    background-color: var(--button-clicked-color);\n}\n\n/* SCREEN AND DIALOGS */\n#screen {\n    width: 100%;\n    height: 100vh;\n    background-color: black;\n    opacity: .4;\n    position: absolute;\n    left: 0;\n    top: 0;\n    display: none;\n}\n\n.add-list-dialog,\n.add-todo-dialog {\n    width: 400px;\n    height: 200px;\n    background-color: white;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    box-shadow: 0 0 50px black;\n    opacity: 1;    \n    display: flex;\n    flex-direction: column;\n}\n\n.add-todo-dialog {\n    width: 400px;\n    height: 500px;\n}\n\n.bar {\n    display: flex;\n    background-color: black;\n    height: 100px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.close {\n    border: 2px solid white;\n    width: 30px;\n    height: 30px;\n    color: white;\n    border-radius: 10px;\n    background-color: red;\n    margin-right: 5px;\n    font-size: .7em;\n    font-weight: bold;\n    padding: 0;\n}\n\n.close:hover,\n.close:active {\n    background-color: rgb(238, 143, 143);\n    cursor: pointer;\n}\n\n.add-form {\n    height: 100%;\n    padding: 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n.form-panel {\n    display: flex;\n    font-size: .75em;\n    gap: 10px;\n}\n\n.description-panel,\n.date-panel {\n    font-size: .75em;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.form-input,\n.form-textarea,\n.date-input,\n.priority-input,\n.list-input {\n    font-size: 1rem;\n    width: 100%;\n    border: 2px solid black;\n    border-radius: 10px;\n}\n\n.form-textarea {\n    height: 5em;\n    resize: none;\n}\n\n.form-button {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: white;\n    border: 2px solid black;\n    border-radius: 10px;\n    background-color: var(--button-color);    \n}\n\n.form-button:hover,\n.form-button:active {\n    background-color: var(--button-clicked-color);\n}"],sourceRoot:""}]);const C=m},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,o,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);a&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var r={},i=[],d=0;d<e.length;d++){var s=e[d],l=a.base?s[0]+a.base:s[0],c=r[l]||0,u="".concat(l," ").concat(c);r[l]=c+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var h=o(m,a);a.byIndex=d,n.splice(d,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var r=a(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var d=t(r[i]);n[d].references--}for(var s=a(e,o),l=0;l<r.length;l++){var c=t(r[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=s}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,o&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},39:(e,n,t)=>{e.exports=t.p+"599d26584b9afc1d20b1.ttf"},335:(e,n,t)=>{e.exports=t.p+"fc2b5060f7accec5cf74.ttf"},40:(e,n,t)=>{e.exports=t.p+"6a0476def43cb79f7d28.png"},820:(e,n,t)=>{e.exports=t.p+"1498d172818b258564e6.jpg"}},n={};function t(a){var o=n[a];if(void 0!==o)return o.exports;var r=n[a]={id:a,exports:{}};return e[a](r,r.exports,t),r.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),a=t(795),o=t.n(a),r=t(569),i=t.n(r),d=t(565),s=t.n(d),l=t(216),c=t.n(l),u=t(589),A=t.n(u),m=t(426),h={};h.styleTagTransform=A(),h.setAttributes=s(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=c(),n()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=t.p+"99e7e9ade87701064d87.png";function p(e){const n=document.createElement("div");return n.id=e,n}function g(e){const n=new Image;return n.src=e,n}function C(e,...n){for(const t of n)e.appendChild(t)}const b=document.getElementById("content"),v=b.appendChild(p("container")),w=b.appendChild(p("header")),y=b.appendChild(p("sidebar")),I=b.appendChild(p("notes-panel")),B=b.appendChild(p("main-panel")),x=b.appendChild(p("screen"));C(v,x,w,y,I,B);const k=document.createElement("div");function E(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function T(e){return E(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function D(e){E(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function M(e){if(E(1,arguments),!T(e)&&"number"!=typeof e)return!1;var n=D(e);return!isNaN(Number(n))}function N(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function S(e,n){E(2,arguments);var t=D(e).getTime(),a=N(n);return new Date(t+a)}function U(e,n){E(2,arguments);var t=N(n);return S(e,-t)}k.textContent="TO-DO LIST",k.id="header-text",C(w,g(f),k);var Y=864e5;function W(e){E(1,arguments);var n=1,t=D(e),a=t.getUTCDay(),o=(a<n?7:0)+a-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function L(e){E(1,arguments);var n=D(e),t=n.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(t+1,0,4),a.setUTCHours(0,0,0,0);var o=W(a),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var i=W(r);return n.getTime()>=o.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function P(e){E(1,arguments);var n=L(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var a=W(t);return a}var j=6048e5,O={};function z(){return O}function q(e,n){var t,a,o,r,i,d,s,l;E(1,arguments);var c=z(),u=N(null!==(t=null!==(a=null!==(o=null!==(r=null==n?void 0:n.weekStartsOn)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:c.weekStartsOn)&&void 0!==a?a:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=D(e),m=A.getUTCDay(),h=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function F(e,n){var t,a,o,r,i,d,s,l;E(1,arguments);var c=D(e),u=c.getUTCFullYear(),A=z(),m=N(null!==(t=null!==(a=null!==(o=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==a?a:null===(s=A.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,m),h.setUTCHours(0,0,0,0);var f=q(h,n),p=new Date(0);p.setUTCFullYear(u,0,m),p.setUTCHours(0,0,0,0);var g=q(p,n);return c.getTime()>=f.getTime()?u+1:c.getTime()>=g.getTime()?u:u-1}function R(e,n){var t,a,o,r,i,d,s,l;E(1,arguments);var c=z(),u=N(null!==(t=null!==(a=null!==(o=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:c.firstWeekContainsDate)&&void 0!==a?a:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),A=F(e,n),m=new Date(0);m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0);var h=q(m,n);return h}var H=6048e5;function Q(e,n){for(var t=e<0?"-":"",a=Math.abs(e).toString();a.length<n;)a="0"+a;return t+a}const X=function(e,n){var t=e.getUTCFullYear(),a=t>0?t:1-t;return Q("yy"===n?a%100:a,n.length)},Z=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):Q(t+1,2)},G=function(e,n){return Q(e.getUTCDate(),n.length)},J=function(e,n){return Q(e.getUTCHours()%12||12,n.length)},_=function(e,n){return Q(e.getUTCHours(),n.length)},$=function(e,n){return Q(e.getUTCMinutes(),n.length)},V=function(e,n){return Q(e.getUTCSeconds(),n.length)},K=function(e,n){var t=n.length,a=e.getUTCMilliseconds();return Q(Math.floor(a*Math.pow(10,t-3)),n.length)};var ee={G:function(e,n,t){var a=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(a,{width:"abbreviated"});case"GGGGG":return t.era(a,{width:"narrow"});default:return t.era(a,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var a=e.getUTCFullYear(),o=a>0?a:1-a;return t.ordinalNumber(o,{unit:"year"})}return X(e,n)},Y:function(e,n,t,a){var o=F(e,a),r=o>0?o:1-o;return"YY"===n?Q(r%100,2):"Yo"===n?t.ordinalNumber(r,{unit:"year"}):Q(r,n.length)},R:function(e,n){return Q(L(e),n.length)},u:function(e,n){return Q(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(a);case"QQ":return Q(a,2);case"Qo":return t.ordinalNumber(a,{unit:"quarter"});case"QQQ":return t.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(a,{width:"narrow",context:"formatting"});default:return t.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,n,t){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(a);case"qq":return Q(a,2);case"qo":return t.ordinalNumber(a,{unit:"quarter"});case"qqq":return t.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(a,{width:"narrow",context:"standalone"});default:return t.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,n,t){var a=e.getUTCMonth();switch(n){case"M":case"MM":return Z(e,n);case"Mo":return t.ordinalNumber(a+1,{unit:"month"});case"MMM":return t.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(a,{width:"narrow",context:"formatting"});default:return t.month(a,{width:"wide",context:"formatting"})}},L:function(e,n,t){var a=e.getUTCMonth();switch(n){case"L":return String(a+1);case"LL":return Q(a+1,2);case"Lo":return t.ordinalNumber(a+1,{unit:"month"});case"LLL":return t.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(a,{width:"narrow",context:"standalone"});default:return t.month(a,{width:"wide",context:"standalone"})}},w:function(e,n,t,a){var o=function(e,n){E(1,arguments);var t=D(e),a=q(t,n).getTime()-R(t,n).getTime();return Math.round(a/H)+1}(e,a);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):Q(o,n.length)},I:function(e,n,t){var a=function(e){E(1,arguments);var n=D(e),t=W(n).getTime()-P(n).getTime();return Math.round(t/j)+1}(e);return"Io"===n?t.ordinalNumber(a,{unit:"week"}):Q(a,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):G(e,n)},D:function(e,n,t){var a=function(e){E(1,arguments);var n=D(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=n.getTime(),o=t-a;return Math.floor(o/Y)+1}(e);return"Do"===n?t.ordinalNumber(a,{unit:"dayOfYear"}):Q(a,n.length)},E:function(e,n,t){var a=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},e:function(e,n,t,a){var o=e.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(n){case"e":return String(r);case"ee":return Q(r,2);case"eo":return t.ordinalNumber(r,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,a){var o=e.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(n){case"c":return String(r);case"cc":return Q(r,n.length);case"co":return t.ordinalNumber(r,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var a=e.getUTCDay(),o=0===a?7:a;switch(n){case"i":return String(o);case"ii":return Q(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},a:function(e,n,t){var a=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,n,t){var a,o=e.getUTCHours();switch(a=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,n,t){var a,o=e.getUTCHours();switch(a=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(a,{width:"narrow",context:"formatting"});default:return t.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var a=e.getUTCHours()%12;return 0===a&&(a=12),t.ordinalNumber(a,{unit:"hour"})}return J(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):_(e,n)},K:function(e,n,t){var a=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(a,{unit:"hour"}):Q(a,n.length)},k:function(e,n,t){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===n?t.ordinalNumber(a,{unit:"hour"}):Q(a,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):$(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):V(e,n)},S:function(e,n){return K(e,n)},X:function(e,n,t,a){var o=(a._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return te(o);case"XXXX":case"XX":return ae(o);default:return ae(o,":")}},x:function(e,n,t,a){var o=(a._originalDate||e).getTimezoneOffset();switch(n){case"x":return te(o);case"xxxx":case"xx":return ae(o);default:return ae(o,":")}},O:function(e,n,t,a){var o=(a._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+ne(o,":");default:return"GMT"+ae(o,":")}},z:function(e,n,t,a){var o=(a._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+ne(o,":");default:return"GMT"+ae(o,":")}},t:function(e,n,t,a){var o=a._originalDate||e;return Q(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,a){return Q((a._originalDate||e).getTime(),n.length)}};function ne(e,n){var t=e>0?"-":"+",a=Math.abs(e),o=Math.floor(a/60),r=a%60;if(0===r)return t+String(o);var i=n||"";return t+String(o)+i+Q(r,2)}function te(e,n){return e%60==0?(e>0?"-":"+")+Q(Math.abs(e)/60,2):ae(e,n)}function ae(e,n){var t=n||"",a=e>0?"-":"+",o=Math.abs(e);return a+Q(Math.floor(o/60),2)+t+Q(o%60,2)}const oe=ee;var re=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},ie=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const de={p:ie,P:function(e,n){var t,a=e.match(/(P+)(p+)?/)||[],o=a[1],r=a[2];if(!r)return re(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",re(o,n)).replace("{{time}}",ie(r,n))}};function se(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var le=["D","DD"],ce=["YY","YYYY"];function ue(e){return-1!==le.indexOf(e)}function Ae(e){return-1!==ce.indexOf(e)}function me(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var he={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function fe(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,a=e.formats[t]||e.formats[e.defaultWidth];return a}}const pe={date:fe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:fe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:fe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ge={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Ce(e){return function(n,t){var a;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,r=null!=t&&t.width?String(t.width):o;a=e.formattingValues[r]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=t&&t.width?String(t.width):e.defaultWidth;a=e.values[d]||e.values[i]}return a[e.argumentCallback?e.argumentCallback(n):n]}}const be={ordinalNumber:function(e,n){var t=Number(e),a=t%100;if(a>20||a<10)switch(a%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Ce({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ce({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ce({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ce({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ce({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ve(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.width,o=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=n.match(o);if(!r)return null;var i,d=r[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?ye(s,(function(e){return e.test(d)})):we(s,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var c=n.slice(d.length);return{value:i,rest:c}}}function we(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function ye(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var Ie,Be={ordinalNumber:(Ie={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(Ie.matchPattern);if(!t)return null;var a=t[0],o=e.match(Ie.parsePattern);if(!o)return null;var r=Ie.valueCallback?Ie.valueCallback(o[0]):o[0];r=n.valueCallback?n.valueCallback(r):r;var i=e.slice(a.length);return{value:r,rest:i}}),era:ve({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ve({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:ve({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ve({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ve({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const xe={code:"en-US",formatDistance:function(e,n,t){var a,o=he[e];return a="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+a:a+" ago":a},formatLong:pe,formatRelative:function(e,n,t,a){return ge[e]},localize:be,match:Be,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ke=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Te=/^'([^]*?)'?$/,De=/''/g,Me=/[a-zA-Z]/;function Ne(e){var n=e.match(Te);return n?n[1].replace(De,"'"):e}function Se(e){E(1,arguments);var n=D(e);return n.setHours(0,0,0,0),n}var Ue=864e5;function Ye(e,n){E(2,arguments);var t=Se(e),a=Se(n),o=t.getTime()-se(t),r=a.getTime()-se(a);return Math.round((o-r)/Ue)}const We=class{constructor(e,n,t,a){this.title=e,this.description=n,this.dueDate=t,this.priority=a,this.selected=!1,this.done=!1}getTitle(){return this.title}setTitle(e){this.title=e}getDescription(){return this.description}setDescription(e){this.description=e}getDueDate(){return this.dueDate}setDueDate(e){this.dueDate=e}getPriority(){return this.priority}setPriority(e){this.priority=e}getSelected(){return this.selected}setSelected(e){this.selected=e}getDone(){return this.done}setDone(e){this.done=e}},Le=class{constructor(e){this.name=e,this.todos=[]}getName(){return this.name}setName(e){this.name=e}getTodos(){return this.todos}count(){return this.todos.length}add(e){this.todos.push(e)}remove(e){let n=this.todos.indexOf(e);this.todos.splice(n,1)}clear(){this.todos=[]}},Pe=class{constructor(e,n){this.title=e,this.description=n}getTitle(){return this.title}setTitle(e){this.title=e}getDescription(){return this.description}setDescription(e){this.description=e}};let je=new We("write the essay","the essay for my English class",new Date(Date.UTC(2022,7,8)),"low"),Oe=new We("get Amy's kids from school","Amy's kids finish classes two hours earlier today",new Date(Date.UTC(2022,7,8)),"high"),ze=new We("run 10 km","go to park and run two laps around the lake",new Date(Date.UTC(2022,7,8)),"low"),qe=new We("get cake","go to Stacy's bakery to collect the birthday cake for Chris",new Date(Date.UTC(2022,7,12)),"high"),Fe=new We("sell the car","look at some ads in local newspapers and online to find someone who wants to buy my car",new Date(Date.UTC(2022,7,19)),"low"),Re=new We("paint kitchen","get yellow paint and paint all the walls plus ceiling in the kitchen",new Date(Date.UTC(2022,7,30)),"low"),He=new Le("School"),Qe=new Le("Workout"),Xe=new Le("Home and Family"),Ze=new Le("Miscellaneous");He.add(je),Qe.add(ze),Xe.add(Oe),Xe.add(qe),Xe.add(Re),Ze.add(Fe);let Ge=new class{constructor(){this.lists=[]}getLists(){return this.lists}count(){return this.todos.length}add(e){this.lists.push(e)}remove(e){let n=lists.indexOf(e);this.lists.splice(n,1)}clear(){this.lists=[]}};Ge.add(He),Ge.add(Qe),Ge.add(Xe),Ge.add(Ze);let Je=new Pe("shopping list","10 eggs, sugar, milk, apples, flour, 2 big cabbages, mineral water"),_e=new Pe("present idea","Steve wants a new toy car for his fifth birthday."),$e=new Pe("Amy's new address","44 Pearl Avenue, Big Bang City 22650"),Ve=new Pe("my password to sth I know about","abc123"),Ke=new Pe("info about Mr. Lee","married, two kids (daughter, 36 and son, 33), math teacher, likes loud music sports, dog person"),en=new class{constructor(){this.notes=[]}getNotes(){return this.notes}count(){return this.notes.length}add(e){this.notes.push(e)}remove(e){let n=notes.indexOf(e);this.notes.splice(n,1)}clear(){this.notes=[]}};en.add(Je),en.add(_e),en.add($e),en.add(Ve),en.add(Ke);for(const e in Ge)console.log(e);const nn=function(e,n){const t=document.createElement("div");t.className="nav-item",t.addEventListener("click",(()=>{for(let e of cn.children)if(e.classList.contains("selected")&&e.classList.remove("selected"),e.hasChildNodes())for(let n of e.children)n.classList.contains("selected")&&n.classList.remove("selected");t.classList.add("selected"),B.replaceChild(vn(e),B.children[0])}));const a=document.createElement("div");a.className="nav-icon-name";const o=document.createElement("div");o.className="nav-icon",n&&(o.appendChild(g(n)),a.appendChild(o));const r=document.createElement("div");r.className="nav-name",r.textContent=e.getName(),a.appendChild(r),t.appendChild(a);const i=document.createElement("div");return i.className="nav-counter",i.textContent=e.count(),t.appendChild(i),t};function tn(e){let n=new Le("Home");for(let t of e.getLists())for(let e of t.getTodos())n.add(e);return n}function an(e){let n=new Le("Today"),t=e.getTodos().filter((e=>0===Ye(e.getDueDate(),new Date)));for(let e of t)n.add(e);return n}function on(e){let n=new Le("This Week"),t=e.getTodos().filter((e=>Ye(e.getDueDate(),new Date)<8));for(let e of t)n.add(e);return n}const rn=t.p+"5af7410126cb91b0bb43.png",dn=t.p+"decbcfeca3ade3bd709c.png",sn=t.p+"d5b7a2dba822ff3c692d.png",ln=t.p+"2c6bde92e32d5c2d85f3.png";let cn,un=tn(Ge),An=an(un),mn=on(un);const hn=function(){cn=document.createElement("div"),cn.className="nav-panel";const e=nn(un,rn);e.classList.add("home-list"),cn.appendChild(e);const n=nn(An,dn);n.classList.add("today-list"),cn.appendChild(n);const t=nn(mn,sn);t.classList.add("week-list"),cn.appendChild(t);const a=document.createElement("div");a.classList.add("my-lists");const o=document.createElement("div");o.appendChild(g(ln)),a.appendChild(o);const r=document.createElement("div");r.className="nav-name",r.textContent="My Lists",a.appendChild(r),cn.appendChild(a);const i=document.createElement("div");i.classList.add("my-lists-panel");for(let e of Ge.getLists()){const n=nn(e,"");n.classList.add("list-name"),i.appendChild(n)}cn.appendChild(i);const d=document.createElement("button");d.classList.add("add-button"),d.id="add-list-button",d.textContent="Add List",d.addEventListener("click",(()=>{x.style.display="grid",b.appendChild(function(){const e=document.createElement("div");e.className="add-list-dialog";const n=document.createElement("div");n.className="bar";const t=document.createElement("button");t.className="close",t.textContent="x",t.addEventListener("click",(()=>{b.removeChild(e),x.style.display="none"})),n.appendChild(t),e.appendChild(n);const a=document.createElement("form");a.className="add-form";const o=document.createElement("div");o.className="form-panel";const r=document.createElement("label");r.className="form-label",r.htmlFor="add-new-list-name",r.textContent="*Name",o.appendChild(r);const i=document.createElement("input");i.className="form-input",i.id="add-new-list-name",i.placeholder="My New List",i.required=!0,o.appendChild(i),a.appendChild(o);const d=document.createElement("button");return d.type="button",d.className="form-button",d.textContent="Create List",d.addEventListener("click",(()=>{const n=i.value;let t=new Le(n);Ge.add(t),fn(),x.style.display="none",b.removeChild(e)})),a.appendChild(d),e.appendChild(a),e}())})),cn.appendChild(d);const s=document.createElement("button");return s.classList.add("add-button"),s.id="add-todo-button",s.textContent="Add Todo",s.addEventListener("click",(()=>{x.style.display="grid",b.appendChild(pn())})),cn.appendChild(s),cn};function fn(){un=tn(Ge),An=an(un),mn=on(un),y.replaceChild(hn(),y.children[0]),B.replaceChild(vn(un),B.children[0])}function pn(e=null){const n=document.createElement("div");n.className="add-todo-dialog";const t=document.createElement("div");t.className="bar";const a=document.createElement("button");a.className="close",a.textContent="x",a.addEventListener("click",(()=>{content.removeChild(n),x.style.display="none"})),t.appendChild(a),n.appendChild(t);const o=document.createElement("form");o.className="add-form";const r=document.createElement("div");r.className="form-panel";const i=document.createElement("label");i.className="form-label",i.htmlFor="add-new-todo-title",i.textContent="*Title",r.appendChild(i);const d=document.createElement("input");d.className="form-input",d.id="add-new-todo-title",d.placeholder="Take a nap",d.required=!0,r.appendChild(d),o.appendChild(r);const s=document.createElement("div");s.className="description-panel";const l=document.createElement("label");l.className="form-label",l.htmlFor="add-new-todo-description",l.textContent="Description",s.appendChild(l);const c=document.createElement("textarea");c.className="form-textarea",c.id="add-new-todo-description",c.placeholder="I deserve some rest.",s.appendChild(c),o.appendChild(s);const u=document.createElement("div");u.className="date-panel";const A=document.createElement("label");A.className="form-label",A.htmlFor="add-new-todo-date",A.textContent="*Due Date",u.appendChild(A);const m=document.createElement("input");m.type="date",m.className="date-input",m.id="add-new-todo-date",m.required=!0,m.valueAsDate=new Date,u.appendChild(m),o.appendChild(u);const h=document.createElement("div");h.className="form-panel";const f=document.createElement("label");f.className="form-label",f.htmlFor="add-new-todo-priority",f.textContent="Priority",h.appendChild(f);const p=document.createElement("select");p.className="priority-input",p.id="add-new-todo-priority",p.placeholder="";const g=document.createElement("option");g.value="low",g.text="low",p.add(g);const C=document.createElement("option");C.value="high",C.text="high",p.add(C),h.appendChild(p),o.appendChild(h);const b=document.createElement("div");b.className="form-panel";const v=document.createElement("label");v.className="form-label",v.htmlFor="add-new-todo-list",v.textContent="List",b.appendChild(v);const w=document.createElement("select");w.className="list-input",w.id="add-new-todo-list",w.placeholder="";for(const e of Ge.getLists()){let n=document.createElement("option");n.value=Ge.getLists().indexOf(e),n.text=e.getName(),w.add(n)}if(b.appendChild(w),o.appendChild(b),e){let n,t;d.value=e.getTitle(),c.value=e.getDescription(),m.valueAsDate=e.getDueDate(),p.value=e.getPriority();for(const a of Ge.getLists())a.getTodos().includes(e)&&(n=a,t=Ge.getLists().indexOf(a));n.remove(e),w.value=t}const y=document.createElement("button");return y.type="button",y.className="form-button",y.textContent=e?"Edit Todo":"Create Todo",y.addEventListener("click",(()=>{const t=d.value,a=c.value,o=new Date(m.valueAsDate),r=p.value,i=Ge.getLists()[w.options[w.selectedIndex].value];if(e)e.setTitle(d.value),e.setDescription(c.value),e.setDueDate(new Date(m.valueAsDate)),e.setPriority(p.value),i.add(e);else{let e=new We(t,a,o,r);i.add(e)}fn(),x.style.display="none",content.removeChild(n)})),o.appendChild(y),n.appendChild(o),n}const gn=t.p+"283e4d837bdf88d00536.png",Cn=t.p+"f41c0923d34d00328265.png",bn=function(e){const n=document.createElement("div");n.className="todo-item";const t=document.createElement("div");t.className="todo-title-panel",t.addEventListener("mouseover",(()=>{l.style.display="block"})),t.addEventListener("mouseout",(()=>{l.style.display="none"}));const a=document.createElement("input");a.type="checkbox",a.addEventListener("change",(e=>{e.target.checked?n.classList.add("done"):n.classList.remove("done")})),a.className="todo-checkbox",t.appendChild(a);const o=document.createElement("div");o.className="todo-title",o.textContent=e.getTitle(),"high"==e.getPriority()&&n.classList.add("high-priority"),t.appendChild(o),n.appendChild(t);const r=document.createElement("div");r.className="todo-date-edit-trash";const i=document.createElement("div");i.textContent=function(e,n,t){var a,o,r,i,d,s,l,c,u,A,m,h,f,p,g,C,b,v;E(2,arguments);var w=String(n),y=z(),I=null!==(a=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:y.locale)&&void 0!==a?a:xe,B=N(null!==(r=null!==(i=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:y.firstWeekContainsDate)&&void 0!==i?i:null===(u=y.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==r?r:1);if(!(B>=1&&B<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var x=N(null!==(m=null!==(h=null!==(f=null!==(p=null==t?void 0:t.weekStartsOn)&&void 0!==p?p:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==f?f:y.weekStartsOn)&&void 0!==h?h:null===(b=y.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==m?m:0);if(!(x>=0&&x<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!I.localize)throw new RangeError("locale must contain localize property");if(!I.formatLong)throw new RangeError("locale must contain formatLong property");var k=D(e);if(!M(k))throw new RangeError("Invalid time value");var T=U(k,se(k)),S={firstWeekContainsDate:B,weekStartsOn:x,locale:I,_originalDate:k};return w.match(Ee).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,de[n])(e,I.formatLong):e})).join("").match(ke).map((function(a){if("''"===a)return"'";var o=a[0];if("'"===o)return Ne(a);var r=oe[o];if(r)return null!=t&&t.useAdditionalWeekYearTokens||!Ae(a)||me(a,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!ue(a)||me(a,n,String(e)),r(T,a,I.localize,S);if(o.match(Me))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}(e.getDueDate(),"yyyy-MM-dd"),i.className="todo-date",r.appendChild(i);const d=document.createElement("div");d.className="todo-edit",d.appendChild(g(gn)),d.addEventListener("click",(()=>{x.style.display="grid",b.appendChild(pn(e))})),r.appendChild(d);const s=document.createElement("div");s.className="todo-trash",s.appendChild(g(Cn)),s.addEventListener("click",(()=>{for(const n of Ge.getLists())n.getTodos().includes(e)&&n.remove(e);fn()})),r.appendChild(s),n.appendChild(r);const l=document.createElement("div");return l.className="todo-description",l.textContent=e.getDescription(),n.appendChild(l),n},vn=function(e){const n=document.createElement("div");n.className="list-panel";for(let t of e.getTodos())n.appendChild(bn(t));return n};y.appendChild(hn()),B.appendChild(vn(un))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,