(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>C});var r=t(537),o=t.n(r),a=t(645),i=t.n(a),d=t(667),s=t.n(d),l=new URL(t(40),t.b),c=new URL(t(39),t.b),u=new URL(t(335),t.b),A=new URL(t(820),t.b),m=i()(o()),h=s()(l),f=s()(c),g=s()(u),p=s()(A);m.push([n.id,":root {\n    --semitransparent: rgba(255, 255, 255, .75);\n    --border-color: rgba(200, 200, 200);\n    --bg-color: rgba(165, 153, 115, .3);\n    --button-color: rgb(206, 37, 37);\n    --button-clicked-color: rgb(172, 112, 112);\n    --high-priority-color: rgb(231, 51, 6);\n    --check-mark: url("+h+");\n}\n\n@font-face {\n    font-family: 'Indie Flower';\n    src: url("+f+") format('truetype');    \n}\n\n@font-face {\n    font-family: 'Roboto';\n    src: url("+g+") format('truetype');\n}\n\nbody {\n    background: url("+p+");\n    font-size: 2em;\n    font-family: 'Roboto';\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    width: 100%;\n    height: 100vh;\n    position: relative;\n}\n\n/* MAIN CONTAINER */\n#container {\n    background-color: var(--semitransparent);\n    width: 80%;\n    min-width: 600px;\n    height: 80vh;\n    min-height: 600px;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 100px 1fr 150px;\n    box-shadow: 0 0 50px black;\n}\n\n#header {\n    grid-column: 1 / 3;\n    background-color: var(--bg-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n    text-shadow: 0 0 5px black;    \n}\n\n#sidebar {\n    border-bottom: 1px solid var(--border-color);\n}\n\n#main-panel {\n    border-left: 1px solid var(--border-color);\n    grid-row: 2 / 4;\n    grid-column: 2 / 3;\n}\n\n/* TODO ITEM */\n.todo-item {\n    font-size: .6em;\n    font-family: \"Indie Flower\", sans-serif;\n    font-weight:bold;\n    display: grid;\n    grid-template-columns: 2fr 1.2fr;\n    grid-template-rows: 2em 1fr;\n}\n\n.high-priority {\n    color: var(--high-priority-color);\n}\n\n.todo-title-panel {\n    font-family: \"Indie Flower\", sans-serif;\n    display: flex;\n    align-items: center;\n    gap: 1em;\n}\n\n.todo-title-panel:hover,\n.nav-item:hover {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox {\n    appearance: none;\n    background-color: white;\n    border: 3px solid black;\n    border-radius: 5px;\n    width: 2.2em;\n    height: 2.2em;\n}\n\n.todo-checkbox:checked {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox:checked::after {\n    content: '';\n    background-image: var(--check-mark);\n    width: 1.6em;\n    height: 1.6em;\n    background-size: 1.7em;\n    display: inline-block;\n}\n\n.todo-title {\n    width:100%;\n}\n\n.done {\n    opacity: .5;\n}\n\n.done .todo-title {\n    text-decoration: line-through;\n}\n\n.todo-date-edit-trash {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.todo-date {\n\n}\n\n.todo-edit {\n\n}\n\n.todo-trash {\n\n}\n\n.todo-description {\n    grid-row: 2;\n    grid-column: 1 / 3;\n    padding-left: 2.6em;\n    display: none;\n}\n\n/* todo list */\n.list-panel {\n    display: flex;\n    flex-direction: column;\n    gap: .5em;\n}\n\n/* SIDEBAR */\n.nav-panel {\n    padding: 1em;\n    font-size: .7em;\n    display: flex;\n    flex-direction: column;\n    gap: .2em;    \n}\n\n.nav-item {\n    display: flex;\n    gap: 1em;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-item:hover {\n    cursor: pointer;    \n}\n\n.nav-item:active {\n    border: 2px solid black;\n}\n\n.nav-icon-name {\n    display: flex;\n    align-items:flex-start;\n    gap: .5em;\n}\n\n.nav-name {\n\n}\n\n.home-list {\n\n}\n\n.today-list {\n\n}\n\n.week-list {\n\n}\n\n.my-lists {\n    display: flex;\n    gap: .6em;\n    justify-content: flex-start;\n    align-items: center;\n}\n\n.list-name {\n    font-size: smaller;\n    padding-left: 1em;\n}\n\n.nav-counter {\n    color: white;\n    border: 2px solid black;\n    background-color: black;\n    min-width: 1em;\n    height: 1em;\n    font-size: .6em;\n    font-weight: bold;\n    padding: 2px;\n    text-align: center;\n    border-radius: 50%;\n}\n\n.list-name .nav-counter {\n    background-color: rgb(58, 55, 55);\n    border-color: rgb(58, 55, 55);\n}\n\n#add-list-button {\n    font-size: 1em;\n    font-weight: bold;\n    padding: .2em;;\n    margin-top: 1em;\n    border: 4px solid black;\n    background-color: var(--button-color);\n    color: white;\n    border-radius: 20px;\n}\n\n#add-list-button:hover,\n#add-list-button:active {\n    background-color: var(--button-clicked-color);\n}\n\n/* SCREEN AND DIALOGS */\n#screen {\n    width: 100%;\n    height: 100vh;\n    background-color: black;\n    opacity: .4;\n    position: absolute;\n    left: 0;\n    top: 0;\n    display: none;\n}\n\n.add-list-dialog,\n.add-todo-dialog {\n    width: 400px;\n    height: 200px;\n    background-color: white;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    box-shadow: 0 0 50px black;\n    opacity: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.add-todo-dialog {\n    width: 400px;\n    height: 500px;\n}\n\n.bar {\n    display: flex;\n    background-color: black;\n    height: 100px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.close {\n    border: 2px solid white;\n    width: 30px;\n    height: 30px;\n    color: white;\n    border-radius: 10px;\n    background-color: red;\n    margin-right: 5px;\n    font-size: .7em;\n    font-weight: bold;\n    padding: 0;\n}\n\n.close:hover,\n.close:active {\n    background-color: rgb(238, 143, 143);\n    cursor: pointer;\n}\n\n.add-form {\n    height: 100%;\n    padding: 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n.form-panel {\n    display: flex;\n    font-size: .75em;\n    gap: 10px;\n}\n\n.description-panel,\n.date-panel {\n    font-size: .75em;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.form-label {\n\n}\n\n.form-input,\n.form-textarea,\n.date-input,\n.priority-input {\n    font-size: 1rem;\n    width: 100%;\n    border: 2px solid black;\n    border-radius: 10px;\n}\n\n.form-textarea {\n    height: 5em;\n    resize: none;\n}\n\n.date-input {\n    \n}\n\n.priority-input {\n    \n}\n\n.form-button {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: white;\n    border: 2px solid black;\n    border-radius: 10px;\n    background-color: var(--button-color);    \n}\n\n.form-button:hover,\n.form-button:active {\n    background-color: var(--button-clicked-color);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n    --semitransparent: rgba(255, 255, 255, .75);\n    --border-color: rgba(200, 200, 200);\n    --bg-color: rgba(165, 153, 115, .3);\n    --button-color: rgb(206, 37, 37);\n    --button-clicked-color: rgb(172, 112, 112);\n    --high-priority-color: rgb(231, 51, 6);\n    --check-mark: url('./icons/check.png');\n}\n\n@font-face {\n    font-family: 'Indie Flower';\n    src: url('./fonts/IndieFlower.ttf') format('truetype');    \n}\n\n@font-face {\n    font-family: 'Roboto';\n    src: url('./fonts/Roboto.ttf') format('truetype');\n}\n\nbody {\n    background: url('./images/bg.jpg');\n    font-size: 2em;\n    font-family: 'Roboto';\n    margin: 0;\n}\n\n#content {\n    display: grid;\n    align-items: center;\n    justify-items: center;\n    width: 100%;\n    height: 100vh;\n    position: relative;\n}\n\n/* MAIN CONTAINER */\n#container {\n    background-color: var(--semitransparent);\n    width: 80%;\n    min-width: 600px;\n    height: 80vh;\n    min-height: 600px;\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 100px 1fr 150px;\n    box-shadow: 0 0 50px black;\n}\n\n#header {\n    grid-column: 1 / 3;\n    background-color: var(--bg-color);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1em;\n    text-shadow: 0 0 5px black;    \n}\n\n#sidebar {\n    border-bottom: 1px solid var(--border-color);\n}\n\n#main-panel {\n    border-left: 1px solid var(--border-color);\n    grid-row: 2 / 4;\n    grid-column: 2 / 3;\n}\n\n/* TODO ITEM */\n.todo-item {\n    font-size: .6em;\n    font-family: \"Indie Flower\", sans-serif;\n    font-weight:bold;\n    display: grid;\n    grid-template-columns: 2fr 1.2fr;\n    grid-template-rows: 2em 1fr;\n}\n\n.high-priority {\n    color: var(--high-priority-color);\n}\n\n.todo-title-panel {\n    font-family: \"Indie Flower\", sans-serif;\n    display: flex;\n    align-items: center;\n    gap: 1em;\n}\n\n.todo-title-panel:hover,\n.nav-item:hover {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox {\n    appearance: none;\n    background-color: white;\n    border: 3px solid black;\n    border-radius: 5px;\n    width: 2.2em;\n    height: 2.2em;\n}\n\n.todo-checkbox:checked {\n    background-color: var(--bg-color);\n}\n\n.todo-checkbox:checked::after {\n    content: '';\n    background-image: var(--check-mark);\n    width: 1.6em;\n    height: 1.6em;\n    background-size: 1.7em;\n    display: inline-block;\n}\n\n.todo-title {\n    width:100%;\n}\n\n.done {\n    opacity: .5;\n}\n\n.done .todo-title {\n    text-decoration: line-through;\n}\n\n.todo-date-edit-trash {\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.todo-date {\n\n}\n\n.todo-edit {\n\n}\n\n.todo-trash {\n\n}\n\n.todo-description {\n    grid-row: 2;\n    grid-column: 1 / 3;\n    padding-left: 2.6em;\n    display: none;\n}\n\n/* todo list */\n.list-panel {\n    display: flex;\n    flex-direction: column;\n    gap: .5em;\n}\n\n/* SIDEBAR */\n.nav-panel {\n    padding: 1em;\n    font-size: .7em;\n    display: flex;\n    flex-direction: column;\n    gap: .2em;    \n}\n\n.nav-item {\n    display: flex;\n    gap: 1em;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.nav-item:hover {\n    cursor: pointer;    \n}\n\n.nav-item:active {\n    border: 2px solid black;\n}\n\n.nav-icon-name {\n    display: flex;\n    align-items:flex-start;\n    gap: .5em;\n}\n\n.nav-name {\n\n}\n\n.home-list {\n\n}\n\n.today-list {\n\n}\n\n.week-list {\n\n}\n\n.my-lists {\n    display: flex;\n    gap: .6em;\n    justify-content: flex-start;\n    align-items: center;\n}\n\n.list-name {\n    font-size: smaller;\n    padding-left: 1em;\n}\n\n.nav-counter {\n    color: white;\n    border: 2px solid black;\n    background-color: black;\n    min-width: 1em;\n    height: 1em;\n    font-size: .6em;\n    font-weight: bold;\n    padding: 2px;\n    text-align: center;\n    border-radius: 50%;\n}\n\n.list-name .nav-counter {\n    background-color: rgb(58, 55, 55);\n    border-color: rgb(58, 55, 55);\n}\n\n#add-list-button {\n    font-size: 1em;\n    font-weight: bold;\n    padding: .2em;;\n    margin-top: 1em;\n    border: 4px solid black;\n    background-color: var(--button-color);\n    color: white;\n    border-radius: 20px;\n}\n\n#add-list-button:hover,\n#add-list-button:active {\n    background-color: var(--button-clicked-color);\n}\n\n/* SCREEN AND DIALOGS */\n#screen {\n    width: 100%;\n    height: 100vh;\n    background-color: black;\n    opacity: .4;\n    position: absolute;\n    left: 0;\n    top: 0;\n    display: none;\n}\n\n.add-list-dialog,\n.add-todo-dialog {\n    width: 400px;\n    height: 200px;\n    background-color: white;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    box-shadow: 0 0 50px black;\n    opacity: 1;\n    display: flex;\n    flex-direction: column;\n}\n\n.add-todo-dialog {\n    width: 400px;\n    height: 500px;\n}\n\n.bar {\n    display: flex;\n    background-color: black;\n    height: 100px;\n    justify-content: flex-end;\n    align-items: center;\n}\n\n.close {\n    border: 2px solid white;\n    width: 30px;\n    height: 30px;\n    color: white;\n    border-radius: 10px;\n    background-color: red;\n    margin-right: 5px;\n    font-size: .7em;\n    font-weight: bold;\n    padding: 0;\n}\n\n.close:hover,\n.close:active {\n    background-color: rgb(238, 143, 143);\n    cursor: pointer;\n}\n\n.add-form {\n    height: 100%;\n    padding: 1em;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n}\n\n.form-panel {\n    display: flex;\n    font-size: .75em;\n    gap: 10px;\n}\n\n.description-panel,\n.date-panel {\n    font-size: .75em;\n    gap: 5px;\n    display: flex;\n    flex-direction: column;\n}\n\n.form-label {\n\n}\n\n.form-input,\n.form-textarea,\n.date-input,\n.priority-input {\n    font-size: 1rem;\n    width: 100%;\n    border: 2px solid black;\n    border-radius: 10px;\n}\n\n.form-textarea {\n    height: 5em;\n    resize: none;\n}\n\n.date-input {\n    \n}\n\n.priority-input {\n    \n}\n\n.form-button {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: white;\n    border: 2px solid black;\n    border-radius: 10px;\n    background-color: var(--button-color);    \n}\n\n.form-button:hover,\n.form-button:active {\n    background-color: var(--button-clicked-color);\n}"],sourceRoot:""}]);const C=m},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],d=0;d<n.length;d++){var s=n[d],l=r.base?s[0]+r.base:s[0],c=a[l]||0,u="".concat(l," ").concat(c);a[l]=c+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var h=o(m,r);r.byIndex=d,e.splice(d,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var s=r(n,o),l=0;l<a.length;l++){var c=t(a[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},39:(n,e,t)=>{n.exports=t.p+"599d26584b9afc1d20b1.ttf"},335:(n,e,t)=>{n.exports=t.p+"fc2b5060f7accec5cf74.ttf"},40:(n,e,t)=>{n.exports=t.p+"6a0476def43cb79f7d28.png"},820:(n,e,t)=>{n.exports=t.p+"1498d172818b258564e6.jpg"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),i=t.n(a),d=t(565),s=t.n(d),l=t(216),c=t.n(l),u=t(589),A=t.n(u),m=t(426),h={};h.styleTagTransform=A(),h.setAttributes=s(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=c(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=t.p+"99e7e9ade87701064d87.png";function g(n){const e=document.createElement("div");return e.id=n,e}function p(n){const e=new Image;return e.src=n,e}function C(n,...e){for(const t of e)n.appendChild(t)}const b=document.getElementById("content"),v=b.appendChild(g("container")),w=b.appendChild(g("header")),y=b.appendChild(g("sidebar")),I=b.appendChild(g("notes-panel")),B=b.appendChild(g("main-panel"));C(v,b.appendChild(g("screen")),w,y,I,B);const x=document.createElement("div");function k(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function E(n){return k(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function T(n){k(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function D(n){if(k(1,arguments),!E(n)&&"number"!=typeof n)return!1;var e=T(n);return!isNaN(Number(e))}function M(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function S(n,e){k(2,arguments);var t=T(n).getTime(),r=M(e);return new Date(t+r)}function N(n,e){k(2,arguments);var t=M(e);return S(n,-t)}x.textContent="TO-DO LIST",x.id="header-text",C(w,p(f),x);var U=864e5;function Y(n){k(1,arguments);var e=1,t=T(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function W(n){k(1,arguments);var e=T(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=Y(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=Y(a);return e.getTime()>=o.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function P(n){k(1,arguments);var e=W(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=Y(t);return r}var j=6048e5,O={};function L(){return O}function z(n,e){var t,r,o,a,i,d,s,l;k(1,arguments);var c=L(),u=M(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:c.weekStartsOn)&&void 0!==r?r:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=T(n),m=A.getUTCDay(),h=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function q(n,e){var t,r,o,a,i,d,s,l;k(1,arguments);var c=T(n),u=c.getUTCFullYear(),A=L(),m=M(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,m),h.setUTCHours(0,0,0,0);var f=z(h,e),g=new Date(0);g.setUTCFullYear(u,0,m),g.setUTCHours(0,0,0,0);var p=z(g,e);return c.getTime()>=f.getTime()?u+1:c.getTime()>=p.getTime()?u:u-1}function R(n,e){var t,r,o,a,i,d,s,l;k(1,arguments);var c=L(),u=M(null!==(t=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:c.firstWeekContainsDate)&&void 0!==r?r:null===(s=c.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),A=q(n,e),m=new Date(0);m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0);var h=z(m,e);return h}var F=6048e5;function H(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const Q=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return H("yy"===e?r%100:r,e.length)},X=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):H(t+1,2)},Z=function(n,e){return H(n.getUTCDate(),e.length)},G=function(n,e){return H(n.getUTCHours()%12||12,e.length)},J=function(n,e){return H(n.getUTCHours(),e.length)},_=function(n,e){return H(n.getUTCMinutes(),e.length)},$=function(n,e){return H(n.getUTCSeconds(),e.length)},V=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return H(Math.floor(r*Math.pow(10,t-3)),e.length)};var K={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return Q(n,e)},Y:function(n,e,t,r){var o=q(n,r),a=o>0?o:1-o;return"YY"===e?H(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):H(a,e.length)},R:function(n,e){return H(W(n),e.length)},u:function(n,e){return H(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return H(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return H(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return X(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return H(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){k(1,arguments);var t=T(n),r=z(t,e).getTime()-R(t,e).getTime();return Math.round(r/F)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):H(o,e.length)},I:function(n,e,t){var r=function(n){k(1,arguments);var e=T(n),t=Y(e).getTime()-P(e).getTime();return Math.round(t/j)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):H(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):Z(n,e)},D:function(n,e,t){var r=function(n){k(1,arguments);var e=T(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/U)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):H(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return H(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return H(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return H(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return G(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):J(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):H(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):_(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):$(n,e)},S:function(n,e){return V(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return en(o);case"XXXX":case"XX":return tn(o);default:return tn(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return en(o);case"xxxx":case"xx":return tn(o);default:return tn(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+nn(o,":");default:return"GMT"+tn(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+nn(o,":");default:return"GMT"+tn(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return H(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return H((r._originalDate||n).getTime(),e.length)}};function nn(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=e||"";return t+String(o)+i+H(a,2)}function en(n,e){return n%60==0?(n>0?"-":"+")+H(Math.abs(n)/60,2):tn(n,e)}function tn(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+H(Math.floor(o/60),2)+t+H(o%60,2)}const rn=K;var on=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},an=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const dn={p:an,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return on(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",on(o,e)).replace("{{time}}",an(a,e))}};function sn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var ln=["D","DD"],cn=["YY","YYYY"];function un(n){return-1!==ln.indexOf(n)}function An(n){return-1!==cn.indexOf(n)}function mn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var hn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function fn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const gn={date:fn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:fn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:fn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var pn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Cn(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[d]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const bn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Cn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Cn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Cn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Cn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Cn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function vn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,d=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(s)?yn(s,(function(n){return n.test(d)})):wn(s,(function(n){return n.test(d)}));i=n.valueCallback?n.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var c=e.slice(d.length);return{value:i,rest:c}}}function wn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function yn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var In,Bn={ordinalNumber:(In={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(In.matchPattern);if(!t)return null;var r=t[0],o=n.match(In.parsePattern);if(!o)return null;var a=In.valueCallback?In.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=n.slice(r.length);return{value:a,rest:i}}),era:vn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:vn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:vn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:vn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:vn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const xn={code:"en-US",formatDistance:function(n,e,t){var r,o=hn[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:gn,formatRelative:function(n,e,t,r){return pn[n]},localize:bn,match:Bn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var kn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,En=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Tn=/^'([^]*?)'?$/,Dn=/''/g,Mn=/[a-zA-Z]/;function Sn(n){var e=n.match(Tn);return e?e[1].replace(Dn,"'"):n}function Nn(n){k(1,arguments);var e=T(n);return e.setHours(0,0,0,0),e}var Un=864e5;function Yn(n,e){k(2,arguments);var t=Nn(n),r=Nn(e),o=t.getTime()-sn(t),a=r.getTime()-sn(r);return Math.round((o-a)/Un)}const Wn=t.p+"283e4d837bdf88d00536.png",Pn=t.p+"f41c0923d34d00328265.png",jn=function(n){const e=document.createElement("div");e.className="todo-item";const t=document.createElement("div");t.className="todo-title-panel",t.addEventListener("mouseover",(()=>{l.style.display="block"})),t.addEventListener("mouseout",(()=>{l.style.display="none"}));const r=document.createElement("input");r.type="checkbox",r.addEventListener("change",(n=>{n.target.checked?e.classList.add("done"):e.classList.remove("done")})),r.className="todo-checkbox",t.appendChild(r);const o=document.createElement("div");o.className="todo-title",o.textContent=n.getTitle(),"high"==n.getPriority()&&e.classList.add("high-priority"),t.appendChild(o),e.appendChild(t);const a=document.createElement("div");a.className="todo-date-edit-trash";const i=document.createElement("div");i.textContent=function(n,e,t){var r,o,a,i,d,s,l,c,u,A,m,h,f,g,p,C,b,v;k(2,arguments);var w=String(e),y=L(),I=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:y.locale)&&void 0!==r?r:xn,B=M(null!==(a=null!==(i=null!==(d=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:y.firstWeekContainsDate)&&void 0!==i?i:null===(u=y.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(B>=1&&B<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var x=M(null!==(m=null!==(h=null!==(f=null!==(g=null==t?void 0:t.weekStartsOn)&&void 0!==g?g:null==t||null===(p=t.locale)||void 0===p||null===(C=p.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==f?f:y.weekStartsOn)&&void 0!==h?h:null===(b=y.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==m?m:0);if(!(x>=0&&x<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!I.localize)throw new RangeError("locale must contain localize property");if(!I.formatLong)throw new RangeError("locale must contain formatLong property");var E=T(n);if(!D(E))throw new RangeError("Invalid time value");var S=N(E,sn(E)),U={firstWeekContainsDate:B,weekStartsOn:x,locale:I,_originalDate:E};return w.match(En).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,dn[e])(n,I.formatLong):n})).join("").match(kn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Sn(r);var a=rn[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!An(r)||mn(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!un(r)||mn(r,e,String(n)),a(S,r,I.localize,U);if(o.match(Mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(n.getDueDate(),"yyyy-MM-dd"),i.className="todo-date",a.appendChild(i);const d=document.createElement("div");d.className="todo-edit",d.appendChild(p(Wn)),a.appendChild(d);const s=document.createElement("div");s.className="todo-trash",s.appendChild(p(Pn)),a.appendChild(s),e.appendChild(a);const l=document.createElement("div");return l.className="todo-description",l.textContent=n.getDescription(),e.appendChild(l),e},On=function(n){const e=document.createElement("div");e.className="list-panel";for(let t of n.getTodos())e.appendChild(jn(t));return e},Ln=class{constructor(n,e,t,r){this.title=n,this.description=e,this.dueDate=t,this.priority=r,this.selected=!1,this.done=!1}getTitle(){return this.title}setTitle(n){this.title=n}getDescription(){return this.description}setDescription(n){this.description=n}getDueDate(){return this.dueDate}setDueDate(n){this.dueDate=n}getPriority(){return this.priority}setPriority(n){this.priority=n}getSelected(){return this.selected}setSelected(n){this.selected=n}getDone(){return this.done}setDone(n){this.done=n}},zn=class{constructor(n){this.name=n,this.todos=[]}getName(){return this.name}setName(n){this.name=n}getTodos(){return this.todos}count(){return this.todos.length}add(n){this.todos.push(n)}remove(n){let e=todos.indexOf(n);this.todos.splice(e,1)}clear(){this.todos=[]}},qn=class{constructor(n,e){this.title=n,this.description=e}getTitle(){return this.title}setTitle(n){this.title=n}getDescription(){return this.description}setDescription(n){this.description=n}};let Rn=new Ln("write the essay","the essay for my English class",new Date(2022,7,8),"low"),Fn=new Ln("get Amy's kids from school","Amy's kids finish classes two hours earlier today",new Date(2022,7,8),"high"),Hn=new Ln("run 10 km","go to park and run two laps around the lake",new Date(2022,7,8),"low"),Qn=new Ln("get cake","go to Stacy's bakery to collect the birthday cake for Chris",new Date(2022,7,12),"high"),Xn=new Ln("sell the car","look at some ads in local newspapers and online to find someone who wants to buy my car",new Date(2022,7,19),"low"),Zn=new Ln("paint kitchen","get yellow paint and paint all the walls plus ceiling in the kitchen",new Date(2022,7,30),"low"),Gn=new zn("School"),Jn=new zn("Workout"),_n=new zn("Home and Family"),$n=new zn("Miscellaneous");Gn.add(Rn),Jn.add(Hn),_n.add(Fn),_n.add(Qn),_n.add(Zn),$n.add(Xn);let Vn=new class{constructor(){this.lists=[]}getLists(){return this.lists}count(){return this.todos.length}add(n){this.lists.push(n)}remove(n){let e=lists.indexOf(n);this.lists.splice(e,1)}clear(){this.lists=[]}};Vn.add(Gn),Vn.add(Jn),Vn.add(_n),Vn.add($n);let Kn=new qn("shopping list","10 eggs, sugar, milk, apples, flour, 2 big cabbages, mineral water"),ne=new qn("present idea","Steve wants a new toy car for his fifth birthday."),ee=new qn("Amy's new address","44 Pearl Avenue, Big Bang City 22650"),te=new qn("my password to sth I know about","abc123"),re=new qn("info about Mr. Lee","married, two kids (daughter, 36 and son, 33), math teacher, likes loud music sports, dog person"),oe=new class{constructor(){this.notes=[]}getNotes(){return this.notes}count(){return this.notes.length}add(n){this.notes.push(n)}remove(n){let e=notes.indexOf(n);this.notes.splice(e,1)}clear(){this.notes=[]}};oe.add(Kn),oe.add(ne),oe.add(ee),oe.add(te),oe.add(re);const ae=function(n,e){const t=document.createElement("div");t.className="nav-item",t.addEventListener("click",(()=>{B.replaceChild(On(n),B.children[0])}));const r=document.createElement("div");r.className="nav-icon-name";const o=document.createElement("div");o.className="nav-icon",e&&(o.appendChild(p(e)),r.appendChild(o));const a=document.createElement("div");a.className="nav-name",a.textContent=n.getName(),r.appendChild(a),t.appendChild(r);const i=document.createElement("div");return i.className="nav-counter",i.textContent=n.count(),t.appendChild(i),t};function ie(n){const e=document.createElement("div");e.className="add-list-dialog";const t=document.createElement("div");t.className="bar";const r=document.createElement("button");r.className="close",r.textContent="x",t.appendChild(r),e.appendChild(t);const o=document.createElement("form");o.className="add-form";const a=document.createElement("div");a.className="form-panel";const i=document.createElement("label");i.className="form-label",i.htmlFor="add-new-list-name",i.textContent="*Name",a.appendChild(i);const d=document.createElement("input");d.className="form-input",d.id="add-new-list-name",d.placeholder="My New List",d.required=!0,a.appendChild(d),o.appendChild(a);const s=document.createElement("button");return s.className="form-button",s.textContent="Create List",o.appendChild(s),e.appendChild(o),e}const de=t.p+"5af7410126cb91b0bb43.png",se=t.p+"decbcfeca3ade3bd709c.png",le=t.p+"d5b7a2dba822ff3c692d.png",ce=t.p+"2c6bde92e32d5c2d85f3.png",ue=function(n){let e=new zn("Home");for(let t of n.getLists())for(let n of t.getTodos())e.add(n);return e}(Vn),Ae=function(n){let e=new zn("Today"),t=n.getTodos().filter((n=>0===Yn(n.getDueDate(),new Date)));for(let n of t)e.add(n);return e}(ue),me=function(n){let e=new zn("This Week"),t=n.getTodos().filter((n=>Yn(n.getDueDate(),new Date)<8));for(let n of t)e.add(n);return e}(ue);b.appendChild(ie()),y.appendChild(function(){const n=document.createElement("div");n.className="nav-panel";const e=ae(ue,de);e.classList.add("home-list"),n.appendChild(e);const t=ae(Ae,se);t.classList.add("today-list"),n.appendChild(t);const r=ae(me,le);r.classList.add("week-list"),n.appendChild(r);const o=document.createElement("div");o.classList.add("my-lists");const a=document.createElement("div");a.appendChild(p(ce)),o.appendChild(a);const i=document.createElement("div");i.className="nav-name",i.textContent="My Lists",o.appendChild(i),n.appendChild(o);for(let e of Vn.getLists()){const t=ae(e,"");t.classList.add("list-name"),n.appendChild(t)}const d=document.createElement("button");return d.id="add-list-button",d.textContent="Add List",d.addEventListener("click",(()=>{ie()})),n.appendChild(d),n}()),B.appendChild(On(ue))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,